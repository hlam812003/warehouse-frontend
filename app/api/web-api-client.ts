//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import followIfLoginRedirect from './auth/login/api-authorization/followIfLoginRedirect';

export class AreasClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http || { fetch: fetch as any };
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createArea(command: CreateAreaCommand): Promise<ResponseDto> {
        let url_ = this.baseUrl + "/api/Areas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateArea(_response);
        });
    }

    protected processCreateArea(response: Response): Promise<ResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDto>(null as any);
    }
}

export class CategoriesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http || { fetch: fetch as any };
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createCategory(command: CreateCategoryCommand): Promise<ResponseDto> {
        let url_ = this.baseUrl + "/api/Categories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCategory(_response);
        });
    }

    protected processCreateCategory(response: Response): Promise<ResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDto>(null as any);
    }
}

export class CompaniesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http || { fetch: fetch as any };
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createCompany(command: CreateCompanyCommand): Promise<ResponseDto> {
        let url_ = this.baseUrl + "/api/Companies";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCompany(_response);
        });
    }

    protected processCreateCompany(response: Response): Promise<ResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDto>(null as any);
    }

    getCompanyList(): Promise<CompanyListVM> {
        let url_ = this.baseUrl + "/api/Companies";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCompanyList(_response);
        });
    }

    protected processGetCompanyList(response: Response): Promise<CompanyListVM> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyListVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyListVM>(null as any);
    }
}

export class CompanyOwnerClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http || { fetch: fetch as any };
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    create(command: CreateCompanyOwnerCommand): Promise<ResponseDto> {
        let url_ = this.baseUrl + "/api/CompanyOwner";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<ResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDto>(null as any);
    }

    getAll(): Promise<CompanyOwnerListVM> {
        let url_ = this.baseUrl + "/api/CompanyOwner/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<CompanyOwnerListVM> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyOwnerListVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyOwnerListVM>(null as any);
    }

    getDetail(id: string): Promise<CompanyOwnerDetailDto> {
        let url_ = this.baseUrl + "/api/CompanyOwner/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDetail(_response);
        });
    }

    protected processGetDetail(response: Response): Promise<CompanyOwnerDetailDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyOwnerDetailDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyOwnerDetailDto>(null as any);
    }

    update(id: string, command: UpdateCompanyOwnerCommand): Promise<ResponseDto> {
        let url_ = this.baseUrl + "/api/CompanyOwner/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDto>(null as any);
    }

    delete(id: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/CompanyOwner/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<boolean> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }
}

export class CustomersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http || { fetch: fetch as any };
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createCustomer(command: CreateCustomerCommand): Promise<ResponseDto> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCustomer(_response);
        });
    }

    protected processCreateCustomer(response: Response): Promise<ResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDto>(null as any);
    }

    updateCustomer(command: UpdateCustomerCommand): Promise<ResponseDto> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCustomer(_response);
        });
    }

    protected processUpdateCustomer(response: Response): Promise<ResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDto>(null as any);
    }

    getListCustomer(): Promise<CustomerListVM> {
        let url_ = this.baseUrl + "/api/Customers/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListCustomer(_response);
        });
    }

    protected processGetListCustomer(response: Response): Promise<CustomerListVM> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerListVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CustomerListVM>(null as any);
    }

    getCustomerDetail(id: string): Promise<CustomerDetailVM> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCustomerDetail(_response);
        });
    }

    protected processGetCustomerDetail(response: Response): Promise<CustomerDetailVM> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerDetailVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CustomerDetailVM>(null as any);
    }

    deleteCustomer(id: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCustomer(_response);
        });
    }

    protected processDeleteCustomer(response: Response): Promise<boolean> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }
}

export class IdentityUserClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http || { fetch: fetch as any };
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    signIn(query: SignInCommand): Promise<SignInVm> {
        let url_ = this.baseUrl + "/api/IdentityUser/signin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSignIn(_response);
        });
    }

    protected processSignIn(response: Response): Promise<SignInVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SignInVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SignInVm>(null as any);
    }

    resetPassword(command: ResetPasswordCommand): Promise<ResetPasswordVm> {
        let url_ = this.baseUrl + "/api/IdentityUser/resetpassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResetPassword(_response);
        });
    }

    protected processResetPassword(response: Response): Promise<ResetPasswordVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResetPasswordVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResetPasswordVm>(null as any);
    }
}

export class OrdersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http || { fetch: fetch as any };
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    importProduct(command: ImportStogareCommand): Promise<ResponseDto> {
        let url_ = this.baseUrl + "/api/Orders/import";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportProduct(_response);
        });
    }

    protected processImportProduct(response: Response): Promise<ResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDto>(null as any);
    }

    getList(query: GetOrderListQuery): Promise<OrderListVM> {
        let url_ = this.baseUrl + "/api/Orders/all";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<OrderListVM> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderListVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OrderListVM>(null as any);
    }

    deleteOrder(id: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteOrder(_response);
        });
    }

    protected processDeleteOrder(response: Response): Promise<boolean> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    getOrderDetail(id: string): Promise<OrderDetailVM> {
        let url_ = this.baseUrl + "/api/Orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrderDetail(_response);
        });
    }

    protected processGetOrderDetail(response: Response): Promise<OrderDetailVM> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderDetailVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OrderDetailVM>(null as any);
    }
}

export class ProductsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http || { fetch: fetch as any };
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getProductList(): Promise<ProductListVM> {
        let url_ = this.baseUrl + "/api/Products";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProductList(_response);
        });
    }

    protected processGetProductList(response: Response): Promise<ProductListVM> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductListVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductListVM>(null as any);
    }
}

export class StorageClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http || { fetch: fetch as any };
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createStorage(command: CreateStorageCommand): Promise<ResponseDto> {
        let url_ = this.baseUrl + "/api/Storage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateStorage(_response);
        });
    }

    protected processCreateStorage(response: Response): Promise<ResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDto>(null as any);
    }

    getStorageList(): Promise<StorageListVM> {
        let url_ = this.baseUrl + "/api/Storage";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetStorageList(_response);
        });
    }

    protected processGetStorageList(response: Response): Promise<StorageListVM> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StorageListVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StorageListVM>(null as any);
    }
}

export class SuperAdminClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http || { fetch: fetch as any };
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    userRegister(command: CreateUserCommand): Promise<ResponseDto> {
        let url_ = this.baseUrl + "/api/SuperAdmin/userregister";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserRegister(_response);
        });
    }

    protected processUserRegister(response: Response): Promise<ResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDto>(null as any);
    }
}

export class ResponseDto implements IResponseDto {
    statusCode?: number;
    message?: string;
    data?: any | undefined;

    constructor(data?: IResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): ResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["data"] = this.data;
        return data;
    }
}

export interface IResponseDto {
    statusCode?: number;
    message?: string;
    data?: any | undefined;
}

export class CreateAreaCommand implements ICreateAreaCommand {
    areaName?: string;

    constructor(data?: ICreateAreaCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.areaName = _data["areaName"];
        }
    }

    static fromJS(data: any): CreateAreaCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAreaCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["areaName"] = this.areaName;
        return data;
    }
}

export interface ICreateAreaCommand {
    areaName?: string;
}

export class CreateCategoryCommand implements ICreateCategoryCommand {
    category?: CategoryDto;

    constructor(data?: ICreateCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.category = _data["category"] ? CategoryDto.fromJS(_data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateCategoryCommand {
    category?: CategoryDto;
}

export class CategoryDto implements ICategoryDto {
    name?: string | undefined;
    products?: ProductDto[] | undefined;

    constructor(data?: ICategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(ProductDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICategoryDto {
    name?: string | undefined;
    products?: ProductDto[] | undefined;
}

export class ProductDto implements IProductDto {
    name?: string | undefined;
    units?: string | undefined;
    amount?: number;
    image?: string | undefined;
    status?: string | undefined;
    expiration?: Date | undefined;
    importDate?: Date | undefined;
    exportDate?: Date | undefined;
    categoryId?: number | undefined;
    areaId?: number | undefined;

    constructor(data?: IProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.units = _data["units"];
            this.amount = _data["amount"];
            this.image = _data["image"];
            this.status = _data["status"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.importDate = _data["importDate"] ? new Date(_data["importDate"].toString()) : <any>undefined;
            this.exportDate = _data["exportDate"] ? new Date(_data["exportDate"].toString()) : <any>undefined;
            this.categoryId = _data["categoryId"];
            this.areaId = _data["areaId"];
        }
    }

    static fromJS(data: any): ProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["units"] = this.units;
        data["amount"] = this.amount;
        data["image"] = this.image;
        data["status"] = this.status;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["importDate"] = this.importDate ? this.importDate.toISOString() : <any>undefined;
        data["exportDate"] = this.exportDate ? this.exportDate.toISOString() : <any>undefined;
        data["categoryId"] = this.categoryId;
        data["areaId"] = this.areaId;
        return data;
    }
}

export interface IProductDto {
    name?: string | undefined;
    units?: string | undefined;
    amount?: number;
    image?: string | undefined;
    status?: string | undefined;
    expiration?: Date | undefined;
    importDate?: Date | undefined;
    exportDate?: Date | undefined;
    categoryId?: number | undefined;
    areaId?: number | undefined;
}

export class CreateCompanyCommand implements ICreateCompanyCommand {
    companyId?: string;
    companyName?: string;
    phone?: string;
    email?: string;

    constructor(data?: ICreateCompanyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyId = _data["companyId"];
            this.companyName = _data["companyName"];
            this.phone = _data["phone"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): CreateCompanyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCompanyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        data["phone"] = this.phone;
        data["email"] = this.email;
        return data;
    }
}

export interface ICreateCompanyCommand {
    companyId?: string;
    companyName?: string;
    phone?: string;
    email?: string;
}

export class CompanyListVM implements ICompanyListVM {
    companyList?: CompanyDto[];

    constructor(data?: ICompanyListVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["companyList"])) {
                this.companyList = [] as any;
                for (let item of _data["companyList"])
                    this.companyList!.push(CompanyDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CompanyListVM {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyListVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.companyList)) {
            data["companyList"] = [];
            for (let item of this.companyList)
                data["companyList"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICompanyListVM {
    companyList?: CompanyDto[];
}

export class CompanyDto implements ICompanyDto {
    companyId?: string | undefined;
    companyName?: string | undefined;
    phoneContact?: string | undefined;

    constructor(data?: ICompanyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyId = _data["companyId"];
            this.companyName = _data["companyName"];
            this.phoneContact = _data["phoneContact"];
        }
    }

    static fromJS(data: any): CompanyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        data["phoneContact"] = this.phoneContact;
        return data;
    }
}

export interface ICompanyDto {
    companyId?: string | undefined;
    companyName?: string | undefined;
    phoneContact?: string | undefined;
}

export class CreateCompanyOwnerCommand implements ICreateCompanyOwnerCommand {
    userName?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;

    constructor(data?: ICreateCompanyOwnerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): CreateCompanyOwnerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCompanyOwnerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        return data;
    }
}

export interface ICreateCompanyOwnerCommand {
    userName?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
}

export class CompanyOwnerListVM implements ICompanyOwnerListVM {
    companyOwners?: UserDto[];

    constructor(data?: ICompanyOwnerListVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["companyOwners"])) {
                this.companyOwners = [] as any;
                for (let item of _data["companyOwners"])
                    this.companyOwners!.push(UserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CompanyOwnerListVM {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyOwnerListVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.companyOwners)) {
            data["companyOwners"] = [];
            for (let item of this.companyOwners)
                data["companyOwners"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICompanyOwnerListVM {
    companyOwners?: UserDto[];
}

export class UserDto implements IUserDto {
    id?: string | undefined;
    companyId?: string | undefined;
    userName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    roleName?: string | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.companyId = _data["companyId"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.roleName = _data["roleName"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyId"] = this.companyId;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["roleName"] = this.roleName;
        return data;
    }
}

export interface IUserDto {
    id?: string | undefined;
    companyId?: string | undefined;
    userName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    roleName?: string | undefined;
}

export class CompanyOwnerDetailDto implements ICompanyOwnerDetailDto {
    compayOwnerId?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    companyName?: string | undefined;
    companyId?: string | undefined;
    companyPhone?: string | undefined;
    companyEmail?: string | undefined;
    companyAddress?: string | undefined;
    storages?: StorageDto[] | undefined;

    constructor(data?: ICompanyOwnerDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.compayOwnerId = _data["compayOwnerId"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.companyName = _data["companyName"];
            this.companyId = _data["companyId"];
            this.companyPhone = _data["companyPhone"];
            this.companyEmail = _data["companyEmail"];
            this.companyAddress = _data["companyAddress"];
            if (Array.isArray(_data["storages"])) {
                this.storages = [] as any;
                for (let item of _data["storages"])
                    this.storages!.push(StorageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CompanyOwnerDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyOwnerDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["compayOwnerId"] = this.compayOwnerId;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["companyName"] = this.companyName;
        data["companyId"] = this.companyId;
        data["companyPhone"] = this.companyPhone;
        data["companyEmail"] = this.companyEmail;
        data["companyAddress"] = this.companyAddress;
        if (Array.isArray(this.storages)) {
            data["storages"] = [];
            for (let item of this.storages)
                data["storages"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICompanyOwnerDetailDto {
    compayOwnerId?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    companyName?: string | undefined;
    companyId?: string | undefined;
    companyPhone?: string | undefined;
    companyEmail?: string | undefined;
    companyAddress?: string | undefined;
    storages?: StorageDto[] | undefined;
}

export class StorageDto implements IStorageDto {
    id?: number;
    name?: string | undefined;
    location?: string | undefined;
    status?: StorageStatus | undefined;
    areas?: AreaDto[] | undefined;

    constructor(data?: IStorageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.location = _data["location"];
            this.status = _data["status"];
            if (Array.isArray(_data["areas"])) {
                this.areas = [] as any;
                for (let item of _data["areas"])
                    this.areas!.push(AreaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StorageDto {
        data = typeof data === 'object' ? data : {};
        let result = new StorageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["location"] = this.location;
        data["status"] = this.status;
        if (Array.isArray(this.areas)) {
            data["areas"] = [];
            for (let item of this.areas)
                data["areas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IStorageDto {
    id?: number;
    name?: string | undefined;
    location?: string | undefined;
    status?: StorageStatus | undefined;
    areas?: AreaDto[] | undefined;
}

export enum StorageStatus {
    Active = 0,
    UnderMaintenance = 1,
    Inactive = 2,
    Closed = 3,
}

export class AreaDto implements IAreaDto {
    name?: string | undefined;

    constructor(data?: IAreaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AreaDto {
        data = typeof data === 'object' ? data : {};
        let result = new AreaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IAreaDto {
    name?: string | undefined;
}

export class UpdateCompanyOwnerCommand implements IUpdateCompanyOwnerCommand {
    userId?: string;
    userName?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    companyId?: string | undefined;
    storages?: StorageDto[] | undefined;

    constructor(data?: IUpdateCompanyOwnerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.companyId = _data["companyId"];
            if (Array.isArray(_data["storages"])) {
                this.storages = [] as any;
                for (let item of _data["storages"])
                    this.storages!.push(StorageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateCompanyOwnerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCompanyOwnerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["companyId"] = this.companyId;
        if (Array.isArray(this.storages)) {
            data["storages"] = [];
            for (let item of this.storages)
                data["storages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateCompanyOwnerCommand {
    userId?: string;
    userName?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    companyId?: string | undefined;
    storages?: StorageDto[] | undefined;
}

export class CreateCustomerCommand implements ICreateCustomerCommand {
    userName?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;

    constructor(data?: ICreateCustomerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): CreateCustomerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        return data;
    }
}

export interface ICreateCustomerCommand {
    userName?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
}

export class UpdateCustomerCommand implements IUpdateCustomerCommand {
    customer?: UpdateCustomer;

    constructor(data?: IUpdateCustomerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customer = _data["customer"] ? UpdateCustomer.fromJS(_data["customer"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateCustomerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateCustomerCommand {
    customer?: UpdateCustomer;
}

export class UpdateCustomer implements IUpdateCustomer {
    customerId?: string;
    userName?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;

    constructor(data?: IUpdateCustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): UpdateCustomer {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        return data;
    }
}

export interface IUpdateCustomer {
    customerId?: string;
    userName?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
}

export class CustomerListVM implements ICustomerListVM {
    customers?: UserDto[] | undefined;

    constructor(data?: ICustomerListVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["customers"])) {
                this.customers = [] as any;
                for (let item of _data["customers"])
                    this.customers!.push(UserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CustomerListVM {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerListVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.customers)) {
            data["customers"] = [];
            for (let item of this.customers)
                data["customers"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICustomerListVM {
    customers?: UserDto[] | undefined;
}

export class CustomerDetailVM implements ICustomerDetailVM {
    customerId?: string | undefined;
    userName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    companyId?: string | undefined;
    companyName?: string | undefined;
    companyPhone?: string | undefined;
    companyEmail?: string | undefined;
    companyAddress?: string | undefined;

    constructor(data?: ICustomerDetailVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.companyId = _data["companyId"];
            this.companyName = _data["companyName"];
            this.companyPhone = _data["companyPhone"];
            this.companyEmail = _data["companyEmail"];
            this.companyAddress = _data["companyAddress"];
        }
    }

    static fromJS(data: any): CustomerDetailVM {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDetailVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        data["companyPhone"] = this.companyPhone;
        data["companyEmail"] = this.companyEmail;
        data["companyAddress"] = this.companyAddress;
        return data;
    }
}

export interface ICustomerDetailVM {
    customerId?: string | undefined;
    userName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    companyId?: string | undefined;
    companyName?: string | undefined;
    companyPhone?: string | undefined;
    companyEmail?: string | undefined;
    companyAddress?: string | undefined;
}

export class SignInVm implements ISignInVm {
    token?: string | undefined;
    statusCode?: number;

    constructor(data?: ISignInVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): SignInVm {
        data = typeof data === 'object' ? data : {};
        let result = new SignInVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface ISignInVm {
    token?: string | undefined;
    statusCode?: number;
}

export class SignInCommand implements ISignInCommand {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ISignInCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): SignInCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SignInCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ISignInCommand {
    email?: string | undefined;
    password?: string | undefined;
}

export class ResetPasswordVm implements IResetPasswordVm {
    token?: string;
    statusCode?: number;

    constructor(data?: IResetPasswordVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): ResetPasswordVm {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IResetPasswordVm {
    token?: string;
    statusCode?: number;
}

export class ResetPasswordCommand implements IResetPasswordCommand {
    email?: string;
    currentPassword?: string;
    newPassword?: string;

    constructor(data?: IResetPasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.currentPassword = _data["currentPassword"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ResetPasswordCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IResetPasswordCommand {
    email?: string;
    currentPassword?: string;
    newPassword?: string;
}

export class ImportStogareCommand implements IImportStogareCommand {
    type?: string;
    totalPrice?: number;
    products?: ImportProductDto[] | undefined;

    constructor(data?: IImportStogareCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.totalPrice = _data["totalPrice"];
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(ImportProductDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ImportStogareCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ImportStogareCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["totalPrice"] = this.totalPrice;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data;
    }
}

export interface IImportStogareCommand {
    type?: string;
    totalPrice?: number;
    products?: ImportProductDto[] | undefined;
}

export class ImportProductDto implements IImportProductDto {
    name?: string | undefined;
    unit?: string;
    quantity?: number;
    price?: number;
    note?: string | undefined;
    expiration?: Date;
    categoryId?: number;
    areaId?: number;
    storageId?: number;

    constructor(data?: IImportProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.unit = _data["unit"];
            this.quantity = _data["quantity"];
            this.price = _data["price"];
            this.note = _data["note"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.categoryId = _data["categoryId"];
            this.areaId = _data["areaId"];
            this.storageId = _data["storageId"];
        }
    }

    static fromJS(data: any): ImportProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new ImportProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["unit"] = this.unit;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        data["note"] = this.note;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["categoryId"] = this.categoryId;
        data["areaId"] = this.areaId;
        data["storageId"] = this.storageId;
        return data;
    }
}

export interface IImportProductDto {
    name?: string | undefined;
    unit?: string;
    quantity?: number;
    price?: number;
    note?: string | undefined;
    expiration?: Date;
    categoryId?: number;
    areaId?: number;
    storageId?: number;
}

export class OrderListVM implements IOrderListVM {
    orders?: OrderDto[];
    page?: Page;

    constructor(data?: IOrderListVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["orders"])) {
                this.orders = [] as any;
                for (let item of _data["orders"])
                    this.orders!.push(OrderDto.fromJS(item));
            }
            this.page = _data["page"] ? Page.fromJS(_data["page"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderListVM {
        data = typeof data === 'object' ? data : {};
        let result = new OrderListVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        data["page"] = this.page ? this.page.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOrderListVM {
    orders?: OrderDto[];
    page?: Page;
}

export class OrderDto implements IOrderDto {
    orderId?: string;
    type?: string;
    date?: Date;
    totalPrice?: number;
    orderDetailsCount?: number;
    totalQuantity?: number;

    constructor(data?: IOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.type = _data["type"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.totalPrice = _data["totalPrice"];
            this.orderDetailsCount = _data["orderDetailsCount"];
            this.totalQuantity = _data["totalQuantity"];
        }
    }

    static fromJS(data: any): OrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["totalPrice"] = this.totalPrice;
        data["orderDetailsCount"] = this.orderDetailsCount;
        data["totalQuantity"] = this.totalQuantity;
        return data;
    }
}

export interface IOrderDto {
    orderId?: string;
    type?: string;
    date?: Date;
    totalPrice?: number;
    orderDetailsCount?: number;
    totalQuantity?: number;
}

export class Page implements IPage {
    size?: number;
    pageNumber?: number;
    totalElements?: number;
    totalPages?: number;
    sortBy?: string | undefined;
    sortAsc?: boolean;

    constructor(data?: IPage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.size = _data["size"];
            this.pageNumber = _data["pageNumber"];
            this.totalElements = _data["totalElements"];
            this.totalPages = _data["totalPages"];
            this.sortBy = _data["sortBy"];
            this.sortAsc = _data["sortAsc"];
        }
    }

    static fromJS(data: any): Page {
        data = typeof data === 'object' ? data : {};
        let result = new Page();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["size"] = this.size;
        data["pageNumber"] = this.pageNumber;
        data["totalElements"] = this.totalElements;
        data["totalPages"] = this.totalPages;
        data["sortBy"] = this.sortBy;
        data["sortAsc"] = this.sortAsc;
        return data;
    }
}

export interface IPage {
    size?: number;
    pageNumber?: number;
    totalElements?: number;
    totalPages?: number;
    sortBy?: string | undefined;
    sortAsc?: boolean;
}

export class GetOrderListQuery implements IGetOrderListQuery {
    page?: Page | undefined;
    searchText?: string | undefined;
    filterData?: FilterData[] | undefined;

    constructor(data?: IGetOrderListQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"] ? Page.fromJS(_data["page"]) : <any>undefined;
            this.searchText = _data["searchText"];
            if (Array.isArray(_data["filterData"])) {
                this.filterData = [] as any;
                for (let item of _data["filterData"])
                    this.filterData!.push(FilterData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetOrderListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetOrderListQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page ? this.page.toJSON() : <any>undefined;
        data["searchText"] = this.searchText;
        if (Array.isArray(this.filterData)) {
            data["filterData"] = [];
            for (let item of this.filterData)
                data["filterData"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetOrderListQuery {
    page?: Page | undefined;
    searchText?: string | undefined;
    filterData?: FilterData[] | undefined;
}

export class FilterData implements IFilterData {
    prop?: string | undefined;
    value?: string | undefined;
    filter?: string | undefined;
    type?: string | undefined;

    constructor(data?: IFilterData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prop = _data["prop"];
            this.value = _data["value"];
            this.filter = _data["filter"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): FilterData {
        data = typeof data === 'object' ? data : {};
        let result = new FilterData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prop"] = this.prop;
        data["value"] = this.value;
        data["filter"] = this.filter;
        data["type"] = this.type;
        return data;
    }
}

export interface IFilterData {
    prop?: string | undefined;
    value?: string | undefined;
    filter?: string | undefined;
    type?: string | undefined;
}

export class OrderDetailVM implements IOrderDetailVM {
    type?: string | undefined;
    date?: Date;
    totalPrice?: number;
    orderProductDtos?: OrderProductDto[] | undefined;

    constructor(data?: IOrderDetailVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.totalPrice = _data["totalPrice"];
            if (Array.isArray(_data["orderProductDtos"])) {
                this.orderProductDtos = [] as any;
                for (let item of _data["orderProductDtos"])
                    this.orderProductDtos!.push(OrderProductDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderDetailVM {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetailVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["totalPrice"] = this.totalPrice;
        if (Array.isArray(this.orderProductDtos)) {
            data["orderProductDtos"] = [];
            for (let item of this.orderProductDtos)
                data["orderProductDtos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOrderDetailVM {
    type?: string | undefined;
    date?: Date;
    totalPrice?: number;
    orderProductDtos?: OrderProductDto[] | undefined;
}

export class OrderProductDto implements IOrderProductDto {
    productName?: string | undefined;
    quantity?: number;
    totalPrice?: number;
    units?: string | undefined;
    note?: string | undefined;

    constructor(data?: IOrderProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productName = _data["productName"];
            this.quantity = _data["quantity"];
            this.totalPrice = _data["totalPrice"];
            this.units = _data["units"];
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): OrderProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productName"] = this.productName;
        data["quantity"] = this.quantity;
        data["totalPrice"] = this.totalPrice;
        data["units"] = this.units;
        data["note"] = this.note;
        return data;
    }
}

export interface IOrderProductDto {
    productName?: string | undefined;
    quantity?: number;
    totalPrice?: number;
    units?: string | undefined;
    note?: string | undefined;
}

export class ProductListVM implements IProductListVM {
    productList?: ProductDto[] | undefined;

    constructor(data?: IProductListVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["productList"])) {
                this.productList = [] as any;
                for (let item of _data["productList"])
                    this.productList!.push(ProductDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductListVM {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.productList)) {
            data["productList"] = [];
            for (let item of this.productList)
                data["productList"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductListVM {
    productList?: ProductDto[] | undefined;
}

export class CreateStorageCommand implements ICreateStorageCommand {
    name?: string;
    location?: string;
    status?: StorageStatus;
    areas?: AreaDto[] | undefined;

    constructor(data?: ICreateStorageCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.location = _data["location"];
            this.status = _data["status"];
            if (Array.isArray(_data["areas"])) {
                this.areas = [] as any;
                for (let item of _data["areas"])
                    this.areas!.push(AreaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateStorageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateStorageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["location"] = this.location;
        data["status"] = this.status;
        if (Array.isArray(this.areas)) {
            data["areas"] = [];
            for (let item of this.areas)
                data["areas"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateStorageCommand {
    name?: string;
    location?: string;
    status?: StorageStatus;
    areas?: AreaDto[] | undefined;
}

export class StorageListVM implements IStorageListVM {
    storages?: StorageDto[] | undefined;

    constructor(data?: IStorageListVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["storages"])) {
                this.storages = [] as any;
                for (let item of _data["storages"])
                    this.storages!.push(StorageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StorageListVM {
        data = typeof data === 'object' ? data : {};
        let result = new StorageListVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.storages)) {
            data["storages"] = [];
            for (let item of this.storages)
                data["storages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IStorageListVM {
    storages?: StorageDto[] | undefined;
}

export class CreateUserCommand implements ICreateUserCommand {
    userRegister?: UserRegister;

    constructor(data?: ICreateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userRegister = _data["userRegister"] ? UserRegister.fromJS(_data["userRegister"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userRegister"] = this.userRegister ? this.userRegister.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateUserCommand {
    userRegister?: UserRegister;
}

export class UserRegister implements IUserRegister {
    userName?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    companyId?: string | undefined;
    roleName?: string | undefined;

    constructor(data?: IUserRegister) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.companyId = _data["companyId"];
            this.roleName = _data["roleName"];
        }
    }

    static fromJS(data: any): UserRegister {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegister();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["companyId"] = this.companyId;
        data["roleName"] = this.roleName;
        return data;
    }
}

export interface IUserRegister {
    userName?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    companyId?: string | undefined;
    roleName?: string | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}